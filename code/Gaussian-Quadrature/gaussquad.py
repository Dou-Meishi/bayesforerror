# -*- coding: utf-8 -*-
'''Gaussian Quadrature.'''

import numpy as np


class GaussQuad(object):

    # www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/
    XkAks = {'GL15': {'xk':  [ 0.0,
                              +2.011940939974345223006283033945962e-01,
                              -2.011940939974345223006283033945962e-01,
                              +3.941513470775633698972073709810455e-01,
                              -3.941513470775633698972073709810455e-01,
                              +5.709721726085388475372267372539106e-01,
                              -5.709721726085388475372267372539106e-01,
                              +7.244177313601700474161860546139380e-01,
                              -7.244177313601700474161860546139380e-01,
                              +8.482065834104272162006483207742169e-01,
                              -8.482065834104272162006483207742169e-01,
                              +9.372733924007059043077589477102095e-01,
                              -9.372733924007059043077589477102095e-01,
                              +9.879925180204854284895657185866126e-01,
                              -9.879925180204854284895657185866126e-01],
                      'ak':  [ 2.025782419255612728806201999675193e-01,
                               1.984314853271115764561183264438393e-01,
                               1.984314853271115764561183264438393e-01,
                               1.861610000155622110268005618664228e-01,
                               1.861610000155622110268005618664228e-01,
                               1.662692058169939335532008604812088e-01,
                               1.662692058169939335532008604812088e-01,
                               1.395706779261543144478047945110283e-01,
                               1.395706779261543144478047945110283e-01,
                               1.071592204671719350118695466858693e-01,
                               1.071592204671719350118695466858693e-01,
                               7.036604748810812470926741645066734e-02,
                               7.036604748810812470926741645066734e-02,
                               3.075324199611726835462839357720442e-02,
                               3.075324199611726835462839357720442e-02]
                      },
             'GL30': { 'xk': [+5.147184255531769583302521316672257e-02,
                              -5.147184255531769583302521316672257e-02,
                              +1.538699136085835469637946727432559e-01,
                              -1.538699136085835469637946727432559e-01,
                              +2.546369261678898464398051298178051e-01,
                              -2.546369261678898464398051298178051e-01,
                              +3.527047255308781134710372070893739e-01,
                              -3.527047255308781134710372070893739e-01,
                              +4.470337695380891767806099003228540e-01,
                              -4.470337695380891767806099003228540e-01,
                              +5.366241481420198992641697933110728e-01,
                              -5.366241481420198992641697933110728e-01,
                              +6.205261829892428611404775564311893e-01,
                              -6.205261829892428611404775564311893e-01,
                              +6.978504947933157969322923880266401e-01,
                              -6.978504947933157969322923880266401e-01,
                              +7.677774321048261949179773409745031e-01,
                              -7.677774321048261949179773409745031e-01,
                              +8.295657623827683974428981197325019e-01,
                              -8.295657623827683974428981197325019e-01,
                              +8.825605357920526815431164625302256e-01,
                              -8.825605357920526815431164625302256e-01,
                              +9.262000474292743258793242770804740e-01,
                              -9.262000474292743258793242770804740e-01,
                              +9.600218649683075122168710255817977e-01,
                              -9.600218649683075122168710255817977e-01,
                              +9.836681232797472099700325816056628e-01,
                              -9.836681232797472099700325816056628e-01,
                              +9.968934840746495402716300509186953e-01,
                              -9.968934840746495402716300509186953e-01],
                       'ak': [1.028526528935588403412856367054150e-01,
                              1.028526528935588403412856367054150e-01,
                              1.017623897484055045964289521685540e-01,
                              1.017623897484055045964289521685540e-01,
                              9.959342058679526706278028210356948e-02,
                              9.959342058679526706278028210356948e-02,
                              9.636873717464425963946862635180987e-02,
                              9.636873717464425963946862635180987e-02,
                              9.212252223778612871763270708761877e-02,
                              9.212252223778612871763270708761877e-02,
                              8.689978720108297980238753071512570e-02,
                              8.689978720108297980238753071512570e-02,
                              8.075589522942021535469493846052973e-02,
                              8.075589522942021535469493846052973e-02,
                              7.375597473770520626824385002219073e-02,
                              7.375597473770520626824385002219073e-02,
                              6.597422988218049512812851511596236e-02,
                              6.597422988218049512812851511596236e-02,
                              5.749315621761906648172168940205613e-02,
                              5.749315621761906648172168940205613e-02,
                              4.840267283059405290293814042280752e-02,
                              4.840267283059405290293814042280752e-02,
                              3.879919256962704959680193644634769e-02,
                              3.879919256962704959680193644634769e-02,
                              2.878470788332336934971917961129204e-02,
                              2.878470788332336934971917961129204e-02,
                              1.846646831109095914230213191204727e-02,
                              1.846646831109095914230213191204727e-02,
                              7.968192496166605615465883474673622e-03,
                              7.968192496166605615465883474673622e-03]
                       },
             'GK15': {'Gxk': [ 0.0,
                              +4.058451513773971669066064120769615e-01,
                              -4.058451513773971669066064120769615e-01,
                              +7.415311855993944398638647732807884e-01,
                              -7.415311855993944398638647732807884e-01,
                              +9.491079123427585245261896840478513e-01,
                              -9.491079123427585245261896840478513e-01],
                      'Gak': [ 4.179591836734693877551020408163265e-01,
                               3.818300505051189449503697754889751e-01,
                               3.818300505051189449503697754889751e-01,
                               2.797053914892766679014677714237796e-01,
                               2.797053914892766679014677714237796e-01,
                               1.294849661688696932706114326790820e-01,
                               1.294849661688696932706114326790820e-01],
                      'Kxk': [ 0.0,
                              +2.077849550078984676006894037732449e-01,
                              -2.077849550078984676006894037732449e-01,
                              +4.058451513773971669066064120769615e-01,
                              -4.058451513773971669066064120769615e-01,
                              +5.860872354676911302941448382587296e-01,
                              -5.860872354676911302941448382587296e-01,
                              +7.415311855993944398638647732807884e-01,
                              -7.415311855993944398638647732807884e-01,
                              +8.648644233597690727897127886409262e-01,
                              -8.648644233597690727897127886409262e-01,
                              +9.491079123427585245261896840478513e-01,
                              -9.491079123427585245261896840478513e-01,
                              +9.914553711208126392068546975263285e-01,
                              -9.914553711208126392068546975263285e-01],
                      'Kak': [ 2.094821410847278280129991748917143e-01,
                               2.044329400752988924141619992346491e-01,
                               2.044329400752988924141619992346491e-01,
                               1.903505780647854099132564024210137e-01,
                               1.903505780647854099132564024210137e-01,
                               1.690047266392679028265834265985503e-01,
                               1.690047266392679028265834265985503e-01,
                               1.406532597155259187451895905102379e-01,
                               1.406532597155259187451895905102379e-01,
                               1.047900103222501838398763225415180e-01,
                               1.047900103222501838398763225415180e-01,
                               6.309209262997855329070066318920429e-02,
                               6.309209262997855329070066318920429e-02,
                               2.293532201052922496373200805896959e-02,
                               2.293532201052922496373200805896959e-02]
                      },
             'GK21': {'Gxk': [+1.488743389816312108848260011297200e-01,
                              -1.488743389816312108848260011297200e-01,
                              +4.333953941292471907992659431657842e-01,
	                      -4.333953941292471907992659431657842e-01,
                              +6.794095682990244062343273651148736e-01,
                              -6.794095682990244062343273651148736e-01,
                              +8.650633666889845107320966884234930e-01,
                              -8.650633666889845107320966884234930e-01,
                              +9.739065285171717200779640120844521e-01,
                              -9.739065285171717200779640120844521e-01],
                      'Gak': [ 2.955242247147528701738929946513383e-01,
                               2.955242247147528701738929946513383e-01,
                               2.692667193099963550912269215694694e-01,
                               2.692667193099963550912269215694694e-01,
                               2.190863625159820439955349342281632e-01,
                               2.190863625159820439955349342281632e-01,
                               1.494513491505805931457763396576973e-01,
                               1.494513491505805931457763396576973e-01,
                               6.667134430868813759356880989333179e-02,
                               6.667134430868813759356880989333179e-02],
                      'Kxk': [ 0.0,
                              +1.488743389816312108848260011297200e-01,
                              -1.488743389816312108848260011297200e-01,
                              +2.943928627014601981311266031038656e-01,
                              -2.943928627014601981311266031038656e-01,
                              +4.333953941292471907992659431657842e-01,
	                      -4.333953941292471907992659431657842e-01, 
                              +5.627571346686046833390000992726941e-01,
                              -5.627571346686046833390000992726941e-01,
                              +6.794095682990244062343273651148736e-01,
                              -6.794095682990244062343273651148736e-01,
                              +7.808177265864168970637175783450424e-01,
                              -7.808177265864168970637175783450424e-01,
                              +8.650633666889845107320966884234930e-01,
                              -8.650633666889845107320966884234930e-01, 
                              +9.301574913557082260012071800595083e-01,
                              -9.301574913557082260012071800595083e-01,
                              +9.739065285171717200779640120844521e-01,
                              -9.739065285171717200779640120844521e-01, 
                              +9.956571630258080807355272806890028e-01,
                              -9.956571630258080807355272806890028e-01],
                      'Kak': [ 1.494455540029169056649364683898212e-01,
                               1.477391049013384913748415159720680e-01,
                               1.477391049013384913748415159720680e-01,
                               1.427759385770600807970942731387171e-01,
                               1.427759385770600807970942731387171e-01,
                               1.347092173114733259280540017717068e-01,
                               1.347092173114733259280540017717068e-01,
                               1.234919762620658510779581098310742e-01,
                               1.234919762620658510779581098310742e-01,
                               1.093871588022976418992105903258050e-01,
                               1.093871588022976418992105903258050e-01,
                               9.312545458369760553506546508336634e-02,
                               9.312545458369760553506546508336634e-02,
                               7.503967481091995276704314091619001e-02,
                               7.503967481091995276704314091619001e-02,
                               5.475589657435199603138130024458018e-02,
                               5.475589657435199603138130024458018e-02,
                               3.255816230796472747881897245938976e-02,
                               3.255816230796472747881897245938976e-02,
                               1.169463886737187427806439606219205e-02,
                               1.169463886737187427806439606219205e-02],
                      }
    }


    @staticmethod
    def _trans_signature(f, interval):
        '''transform domain(f) from interval to some bounded interval.'''
        a, b = interval
        new_interval = [0, 1]

        if not np.isinf(a) and not np.isinf(b):
            return f, interval  # [a,b] is already bounded
        elif a == -np.inf and not np.isinf(b):
            def _trans_f(t): return f(b+(t-1)/t)/(t*t)
            return _trans_f, new_interval
        elif not np.isinf(a) and b == np.inf:
            def _trans_f(t): return f(a-(t-1)/t)/(t*t)
            return _trans_f, new_interval
        elif a == -np.inf and b == np.inf:
            def _trans_f(t): return (f((t-1)/t)+f(-(t-1)/t))/(t*t)
            return _trans_f, new_interval
        else:
            raise ValueError("Strange Interval [{},{}]".format(a,b))
    

    @classmethod
    def _QNGL_b(cls, f, interval, *, quadname):
        '''Non-adaptive Gauss-Legendre Quadrature for bounded interval.'''
        ak = cls.XkAks[quadname]['ak']
        xk = cls.XkAks[quadname]['xk']
        (a, b), accsum, accsum2 = (interval, 0, 0)

        for i in range(len(ak)):
            accsum += ak[i] * f(xk[i]*(b-a)/2 + (b+a)/2)
            # accsum2 += ak[i] *(f(xk[i]*(b-a)/4 + (b+3*a)/4) + f(xk[i]*(b-a)/4 + (3*b+a)/4))

        return accsum*(b-a)/2, np.nan



    @classmethod
    def _QNGK_b(cls, f, interval, *, quadname):
        '''Non-adaptive Gauss-Kronrod Quadrature for bounded interval.'''
        kak = cls.XkAks[quadname]['Kak']
        gak = cls.XkAks[quadname]['Gak']
        a, b = interval

        kyk = [f(x*(b-a)/2 + (b+a)/2) for x in cls.XkAks[quadname]['Kxk']]
        # TRICKS!! GAUSS NODES IS NESTED IN KRONROD NODES
        gyk = [kyk[i*2] for i in range(len(gak)-1, -1, -2)] \
              + [kyk[i*2+1] for i in range(len(gak)-2, -1, -2)]

        k_sum = np.dot(kak, kyk)
        g_sum = np.dot(gak, gyk)

        # gak = cls.XkAks[quadname]['Gak']
        # kak = cls.XkAks[quadname]['Kak']
        # gxk = cls.XkAks[quadname]['Gxk']
        # kxk = cls.XkAks[quadname]['Kxk']
        # (a, b), g_sum, k_sum = (interval, 0, 0)

        # for i in range(len(gak)):
        #     g_sum += gak[i] * f(gxk[i]*(b-a)/2 + (b+a)/2)

        # for i in range(len(kak)):
        #     k_sum += kak[i] * f(kxk[i]*(b-a)/2 + (b+a)/2)

        return k_sum*(b-a)/2, abs(k_sum-g_sum)*(b-a)/2


    @classmethod
    def QNGL(cls, f, interval, *, division=50, quadname='GL15'):
        '''Non-adaptive Gauss-Legendre Quadrature.'''
        _f, (_a, _b) = cls._trans_signature(f, interval)
        _h = (_b - _a)/division
        _itvs = [[_a+_h*i, _a+_h*(i+1)] for i in range(division)]
        _itgs = [cls._QNGL_b(_f,_interval,quadname=quadname)[0]
                             for _interval in _itvs]

        return sum(_itgs), np.nan


    @classmethod
    def QNGK(cls, f, interval, *, quadname='GK21'):
        '''Non-adaptive Gauss-Kronrod Quadrature.'''
        _f, _interval = cls._trans_signature(f, interval)
        return cls._QNGK_b(_f, _interval, quadname=quadname)


    @classmethod
    def QAGL(cls, f, interval, *, eps=1e-8, limit=50, quadname='GL15'):
        '''Adaptive Gauss-Legendre Quadrature.'''
        pass


    @classmethod
    def QAGK(cls, f, interval, *, eps=1e-15, limit=50, quadname='GK21'):
        '''Adaptive Gauss-Kronrod Quadrature.'''
        _f, _interval = cls._trans_signature(f, interval)
        
        i, e = cls._QNGK_b(_f, _interval, quadname=quadname)
        itg_stack, err_stack, itv_stack = ([i], [e], [_interval])
        lop_count = 1

        while e > eps and lop_count < limit:
            k = np.argmax(e)
            ii, ee = (itg_stack.pop(k), err_stack.pop(k))
            a, b = itv_stack.pop(k)
            m = (a+b)/2
            i1, e1 = cls._QNGK_b(_f, [a,m], quadname=quadname)
            i2, e2 = cls._QNGK_b(_f, [m,b], quadname=quadname)
            itg_stack.extend([i1, i2])
            err_stack.extend([e1, e2])
            itv_stack.extend([ [a,m], [m,b] ])

            e += e1 + e2 - ee
            lop_count += 1

        return sum(itg_stack), e
             


def est_order(quadrature):
    m = 0
    f = lambda x: x**m

    i,_ = quadrature(f, [0,1])
    ref_i = 1/(m+1)

    while abs(i-ref_i) < 1e-9:
        m += 1
        i,_ = quadrature(f, [0,1])
        ref_i = 1/(m+1)

    return m


def main():
    from driver import InteDriver, InteSincDriver
    from scipy.integrate import nquad

    def gkquad(*args, **kws):
        return GaussQuad.QAGK(*args, **kws, limit=20, quadname='GK15')
    def glquad(*args, **kws):
        return GaussQuad.QNGL(*args, **kws, division=20, quadname='GL30')
    def spquad(f, interval, *args, **kws):
        return nquad(f, [interval], *args, **kws, opts={'limit':20})

    gl_driver = InteSincDriver(glquad, repeat=30)
    # gl_driver.runtest()
    # print('\n', gl_driver.test_1())
    # print('\n', gl_driver.test_2())
    print('\n', gl_driver.test_3())

    gk_driver = InteSincDriver(gkquad, repeat=30)
    # gk_driver.runtest()
    # print('\n', gk_driver.test_1())
    # print('\n', gk_driver.test_2())
    print('\n', gk_driver.test_3())

    mq_driver = InteSincDriver(spquad, repeat=30)
    # mq_driver.runtest()
    # print('\n', mq_driver.test_1())
    # print('\n', mq_driver.test_2())
    print('\n', mq_driver.test_3())

    return


if __name__ == '__main__':
    import cProfile
    cProfile.run('main()', filename='gaussquad.profile')
